import cProfile
import unittest
from timeit import default_timer

import numpy
from particle_detection import gaussian_fit
from particle_detection.gaussian_fit import Gaussian
import tifffile
import matplotlib.pyplot as plt


class TestGaussianFit(unittest.TestCase):

    def test_single_gaussian(self):
        """Basic test to see if a sensible Gaussian is generated by gaussian_fit.gaussian_3d."""
        gaussian = Gaussian(200, mu_x=20, mu_y=20, mu_z=10, cov_xx=20, cov_yy=10, cov_zz=5, cov_xy=0, cov_xz=0,
                            cov_yz=0)

        image = numpy.zeros((20, 40, 41), numpy.float32)
        gaussian.draw(image)
        gaussian_fit.add_noise(image)

        # Test if standard deviation is recovered (hint contains incorrect standard deviation on purpose)
        hint = Gaussian(205, mu_x=19, mu_y=19, mu_z=10, cov_xx=1, cov_yy=1, cov_zz=1, cov_xy=0, cov_xz=0, cov_yz=0)
        start = default_timer()
        fitted = gaussian_fit.perform_gaussian_fit(image, hint)
        end = default_timer()
        print("TIME: ", end-start)
        self.assertTrue(gaussian.almost_equal(fitted))

    def test_two_separated_gaussians(self):
        # Create artificial image
        gaussian1 = Gaussian(200, mu_x=15, mu_y=20, mu_z=10, cov_xx=10, cov_yy=10, cov_zz=2, cov_xy=0, cov_xz=0,
                             cov_yz=0)
        gaussian2 = Gaussian(200, mu_x=25, mu_y=15, mu_z=11, cov_xx=10, cov_yy=10, cov_zz=2, cov_xy=0, cov_xz=0,
                             cov_yz=0)
        image = numpy.zeros((20, 40, 40), dtype=numpy.float32)
        gaussian1.draw(image)
        gaussian2.draw(image)
        gaussian_fit.add_noise(image)

        # Perform fitting
        hint1 = Gaussian(205, mu_x=16, mu_y=20, mu_z=10, cov_xx=1, cov_yy=1, cov_zz=1, cov_xy=0, cov_xz=0, cov_yz=0)
        hint2 = Gaussian(205, mu_x=24, mu_y=15, mu_z=11, cov_xx=1, cov_yy=1, cov_zz=1, cov_xy=0, cov_xz=0, cov_yz=0)
        fitted1, fitted2 = gaussian_fit.perform_gaussian_mixture_fit(image, [hint1, hint2])

        # Check the fit
        self.assertTrue(gaussian1.almost_equal(fitted1))
        self.assertTrue(gaussian2.almost_equal(fitted2))

    def test_two_close_gaussians(self):
        gaussian1 = Gaussian(200, mu_x=15, mu_y=20, mu_z=10, cov_xx=25, cov_yy=20, cov_zz=2, cov_xy=10, cov_xz=0,
                             cov_yz=0)
        gaussian2 = Gaussian(200, mu_x=22, mu_y=15, mu_z=11, cov_xx=12, cov_yy=30, cov_zz=2, cov_xy=2, cov_xz=0,
                             cov_yz=0)
        image = numpy.zeros((20, 40, 40), dtype=numpy.float32)
        gaussian1.draw(image)
        gaussian2.draw(image)
        gaussian_fit.add_noise(image)

        # Perform fitting
        hint1 = Gaussian(205, mu_x=15, mu_y=20, mu_z=10, cov_xx=1, cov_yy=1, cov_zz=1, cov_xy=0, cov_xz=0, cov_yz=0)
        hint2 = Gaussian(205, mu_x=22, mu_y=15, mu_z=11, cov_xx=1, cov_yy=1, cov_zz=1, cov_xy=0, cov_xz=0, cov_yz=0)
        fitted1, fitted2 = gaussian_fit.perform_gaussian_mixture_fit(image, [hint1, hint2])

        self.assertTrue(gaussian1.almost_equal(fitted1, cov_delta=8))
        self.assertTrue(gaussian2.almost_equal(fitted2, mu_delta=3, cov_delta=8))


    def test_ignore_third_gaussian(self):
        gaussian1 = Gaussian(200, mu_x=15, mu_y=20, mu_z=10, cov_xx=25, cov_yy=20, cov_zz=2, cov_xy=10, cov_xz=0,
                             cov_yz=0)
        gaussian2 = Gaussian(200, mu_x=22, mu_y=15, mu_z=11, cov_xx=12, cov_yy=30, cov_zz=2, cov_xy=2, cov_xz=0,
                             cov_yz=0)
        ignored_gaussian = Gaussian(200, mu_x=32, mu_y=15, mu_z=11, cov_xx=12, cov_yy=30, cov_zz=2, cov_xy=2, cov_xz=0,
                                    cov_yz=0)
        image = numpy.zeros((20, 40, 40), dtype=numpy.float32)
        gaussian1.draw(image)
        gaussian2.draw(image)
        ignored_gaussian.draw(image)
        gaussian_fit.add_noise(image)

        hint1 = Gaussian(205, mu_x=16, mu_y=20, mu_z=10, cov_xx=1, cov_yy=1, cov_zz=1, cov_xy=0, cov_xz=0, cov_yz=0)
        hint2 = Gaussian(205, mu_x=24, mu_y=15, mu_z=11, cov_xx=1, cov_yy=1, cov_zz=1, cov_xy=0, cov_xz=0, cov_yz=0)
        fitted1, fitted2 = gaussian_fit.perform_gaussian_mixture_fit(image, [hint1, hint2])

        self.assertTrue(gaussian1.almost_equal(fitted1, a_delta=10, mu_delta=2, cov_delta=9))
        # The second Gaussian is hopeless - it is expanded to also cover the third Gaussian

    @unittest.skip("takes five minutes to execute")
    def test_big_image(self):
        gaussians = [
            Gaussian(200, mu_x=100, mu_y=130, mu_z=9, cov_xx=225, cov_yy=400, cov_zz=3, cov_xy=10, cov_xz=0, cov_yz=0),
            Gaussian(200, mu_x=80, mu_y=150, mu_z=12, cov_xx=225, cov_yy=400, cov_zz=3, cov_xy=2, cov_xz=-2, cov_yz=0),
            Gaussian(200, mu_x=140, mu_y=100, mu_z=13, cov_xx=400, cov_yy=900, cov_zz=3, cov_xy=2, cov_xz=0, cov_yz=0)
        ]
        image = numpy.zeros((30, 512, 512), dtype=numpy.float32)
        for gaussian in gaussians:
            gaussian.draw(image)
        gaussian_fit.add_noise(image)

        hints = [
            Gaussian(200, mu_x=105, mu_y=135, mu_z=9, cov_xx=100, cov_yy=100, cov_zz=3, cov_xy=0, cov_xz=0, cov_yz=0),
            Gaussian(200, mu_x=75, mu_y=155, mu_z=12, cov_xx=100, cov_yy=100, cov_zz=3, cov_xy=0, cov_xz=0, cov_yz=0),
            Gaussian(200, mu_x=135, mu_y=105, mu_z=13, cov_xx=100, cov_yy=100, cov_zz=3, cov_xy=0, cov_xz=0, cov_yz=0)
        ]
        fitted = gaussian_fit.perform_gaussian_mixture_fit(image, hints)
        for i in range(len(fitted)):
            self.assertTrue(fitted[i].almost_equal(gaussians[i], a_delta=80, mu_delta=10, cov_delta=150))
